# -*- coding: utf-8 -*-
"""Robotics_A1_19137.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d_MsuIStJ6UcgJ681bgiWbtw2_2CYRuK
"""

#pip install sympy

from sympy import symbols, Eq, solve
from sympy import S, Symbol
import math



# def line(p1, p2):
#       #x1, x2, y1, y2, m, y, x = symbols('x1 x2 y1 y2 m y x')
#       x1, y1 = p1[0], p1[1]
#       x2, y2 = p2[0], p2[1]
#
#       x, y = symbols('x y')
#       if x1==x2:
#           eq = Eq(x -x1)
#           return eq
#       elif y1==y2:
#           eq = Eq(y-y1)
#           return eq
#       m = (y2-y1)/(x2-x1)
#       eq = Eq(y - y1 - m*(x-x1), 0)
#       return eq

#eq = line((1,2),(5, 2))
#print(eq)



def gen_line(p1, p2):

    x1, y1 = p1[0], p1[1]
    x2, y2 = p2[0], p2[1]
    a = -y1 + y2
    b = x1 - x2
    c = - b * y1 - a * x1
    return {"a": a, "b": b, "c": c}

print(gen_line((1,2),(5, 2)))

# def distance(x1, y1, x2, y2):
#     dist = math.sqrt(((x2-x1)*(x2-x1))+((y2-y1)*(y2-y1)))
#     dist = round(dist, 2)
#     return dist

def dist(p1, p2):
    x1, y1 = p1[0], p1[1]
    x2, y2 = p2[0], p2[1]
    dist = math.sqrt(((x2-x1)*(x2-x1))+((y2-y1)*(y2-y1)))
    dist = round(dist, 2)
    return dist

print(dist((1 ,2) ,(3 ,4)))



# def perp_dist(p, p1, p2):
def perp_dist(line, p):
    num = abs((line["a"]*p[0]) + (line["b"]*p[1]) + line["c"])
    den = math.sqrt((line["a"]**2) + (line["b"]**2))
    return num/den


#print(f"the perpendicular distance is: {perp_dist((0,0), (1,5), (3, 7)}")


def calc_poly_dist(poly, p):

    v = map(Point, poly)
    poly = Polygon(*v)
    point = p

    return poly.distance(Point(point[0], point[1])) * (int(poly.encloses_point(Point(point[0], point[1]))) * (-2) + 1)


def calc_poly_tang(poly, p):

    v = map(Point, poly)
    poly = Polygon(*v)
    point = p

    rad = poly.distance(Point(point))
    circ = Ellipse(Point(point), rad, rad)
    cls_point = poly.intersection(circ)
    x_tang = cls_point[0][0] - point[0]
    y_tang = cls_point[0][1] - point[1]
    return math.atan2(y_tang, x_tang)


def poly_intersect(poly1, poly2):

    v11, v12, v13, v14 = map(Point, poly1)
    v21, v22, v23, v24 = map(Point, poly2)

    poly1 = Polygon(v11, v12, v13, v14)
    poly2 = Polygon(v21, v22, v23, v24)

    ret = list(map(list, poly1.intersection(poly2)))
    return ret

